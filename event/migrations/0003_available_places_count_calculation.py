# Generated by Django 5.0.2 on 2024-03-06 19:43

from django.db import migrations

class Migration(migrations.Migration):

    dependencies = [
        ('event', '0002_adding_constraints'),  # Dependency on a previous migration.
    ]

    operations = [
        migrations.RunSQL(
            # Executes raw SQL for advanced database operations.
            sql="""
                -- Adds a new column 'available_places' to 'event_event', defaulting to 0 and not allowing NULLs.
                ALTER TABLE event_event
                ADD COLUMN IF NOT EXISTS available_places INTEGER NOT NULL DEFAULT 0;
                
                -- Defines a function to update 'available_places' in 'event_event' after ticket insertions or deletions.
                CREATE OR REPLACE FUNCTION update_available_places() RETURNS TRIGGER AS $$
                BEGIN
                    UPDATE event_event
                    SET available_places = event_eventlocation.places_count - (
                        SELECT COUNT(*)  -- Counts tickets linked to the event.
                        FROM user_ticket
                        WHERE user_ticket.event_id = NEW.event_id
                    )
                    FROM event_eventlocation
                    WHERE event_event.location_id = event_eventlocation.id AND event_event.id = NEW.event_id;
                    RETURN NEW;
                END;
                $$ LANGUAGE plpgsql;

                -- Creates a trigger that fires after a new ticket is inserted, calling 'update_available_places'.
                CREATE TRIGGER ticket_insert
                AFTER INSERT ON user_ticket
                FOR EACH ROW
                EXECUTE FUNCTION update_available_places();

                -- Creates a trigger that fires after a ticket is deleted, also calling 'update_available_places'.
                CREATE TRIGGER ticket_delete
                AFTER DELETE ON user_ticket
                FOR EACH ROW
                EXECUTE FUNCTION update_available_places();

                -- Defines a function to update the 'is_available' status of an event based on current data.
                CREATE OR REPLACE FUNCTION update_event_availability() RETURNS TRIGGER AS $$
                BEGIN
                    UPDATE event_event
                    SET is_available = FALSE
                    WHERE id = NEW.id AND (date < CURRENT_DATE OR available_places <= 0);
                    RETURN NEW;
                END;
                $$ LANGUAGE plpgsql;
                
                -- Trigger to update 'is_available' after any update on 'event_event'.
                CREATE TRIGGER event_update_after
                AFTER UPDATE ON event_event
                FOR EACH ROW
                EXECUTE FUNCTION update_event_availability();
                
                -- Trigger to update 'is_available' after a new ticket is inserted.
                CREATE TRIGGER ticket_insert_after
                AFTER INSERT ON user_ticket
                FOR EACH ROW
                EXECUTE FUNCTION update_event_availability();

                -- Trigger to update 'is_available' after a ticket is deleted.
                CREATE TRIGGER ticket_delete_after
                AFTER DELETE ON user_ticket
                FOR EACH ROW
                EXECUTE FUNCTION update_event_availability();
            """
        ),
    ]
