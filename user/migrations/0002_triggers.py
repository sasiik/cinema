# Generated by Django 5.0.2 on 2024-03-13 07:17

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('user', '0001_initial'),
    ]

    operations = [
        migrations.RunSQL(
            sql=
            """
            CREATE OR REPLACE FUNCTION public.update_available_places()
                RETURNS trigger
                LANGUAGE 'plpgsql'
                COST 100
                VOLATILE NOT LEAKPROOF
            AS $BODY$
            DECLARE
                event_id_for_calculation INT;
            BEGIN
                -- Determine the event_id to use for calculation based on the operation
                IF TG_OP = 'DELETE' THEN
                    event_id_for_calculation := OLD.event_id;
                ELSE
                    event_id_for_calculation := NEW.event_id;
                END IF;

                -- Perform the available_places update using the determined event_id
                UPDATE event_event
                SET available_places = event_eventlocation.places_count - (
                    SELECT COUNT(*)  -- Counts tickets linked to the event.
                    FROM user_ticket
                    WHERE user_ticket.event_id = event_id_for_calculation
                )
                FROM event_eventlocation
                WHERE event_event.location_id = event_eventlocation.id 
                AND event_event.id = event_id_for_calculation;
                
                -- Debugging output
                IF TG_OP = 'DELETE' THEN
                    RAISE DEBUG 'Trigger function invoked for DELETE. Available places recalculated.';
                ELSE
                    RAISE DEBUG 'Trigger function invoked for INSERT/UPDATE. Available places recalculated.';
                END IF;
                
                RETURN NULL; 
            END;
            $BODY$;

            CREATE OR REPLACE FUNCTION public.verify_ticket_validity()
                RETURNS trigger
                LANGUAGE 'plpgsql'
                COST 100
                VOLATILE NOT LEAKPROOF
            AS $BODY$
                            BEGIN
                                -- Check if the event associated with the ticket is valid (not outdated) and available.
                                IF NOT EXISTS (
                                    SELECT 1 FROM event_event
                                    WHERE event_event.id = NEW.event_id
                                    AND event_event.is_available = TRUE
                                ) THEN
                                    -- Raise an exception if the event is not valid or available.
                                    RAISE EXCEPTION 'Event not valid or not available';
                                END IF;
                                -- Return the new ticket if validation passes.
                                RETURN NEW;
                            END;
                            
            $BODY$;

            CREATE OR REPLACE TRIGGER ticket_insert_delete
            AFTER INSERT OR DELETE OR UPDATE 
            ON public.user_ticket
            FOR EACH ROW
            EXECUTE FUNCTION public.update_available_places();
            
            CREATE OR REPLACE TRIGGER trigger_check_user_ticket_validity
            BEFORE INSERT OR UPDATE 
            ON public.user_ticket
            FOR EACH ROW
            EXECUTE FUNCTION public.verify_ticket_validity();
            """
        )
    ]
